"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("main",{

/***/ "(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));0&&(0);function _export(target,all){for(var name in all)Object.defineProperty(target,name,{enumerable:true,get:all[name]});}_export(exports,{createKey:function(){return createKey;},default:function(){return Router;},matchesMiddleware:function(){return matchesMiddleware;}});const _interop_require_default=__webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(pages-dir-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");const _interop_require_wildcard=__webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(pages-dir-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");const _removetrailingslash=__webpack_require__(/*! ./utils/remove-trailing-slash */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");const _routeloader=__webpack_require__(/*! ../../../client/route-loader */ \"(pages-dir-browser)/./node_modules/next/dist/client/route-loader.js\");const _script=__webpack_require__(/*! ../../../client/script */ \"(pages-dir-browser)/./node_modules/next/dist/client/script.js\");const _iserror=_interop_require_wildcard._(__webpack_require__(/*! ../../../lib/is-error */ \"(pages-dir-browser)/./node_modules/next/dist/lib/is-error.js\"));const _denormalizepagepath=__webpack_require__(/*! ../page-path/denormalize-page-path */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/page-path/denormalize-page-path.js\");const _normalizelocalepath=__webpack_require__(/*! ../i18n/normalize-locale-path */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");const _mitt=_interop_require_default._(__webpack_require__(/*! ../mitt */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/mitt.js\"));const _utils=__webpack_require__(/*! ../utils */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/utils.js\");const _isdynamic=__webpack_require__(/*! ./utils/is-dynamic */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\");const _parserelativeurl=__webpack_require__(/*! ./utils/parse-relative-url */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js\");const _routematcher=__webpack_require__(/*! ./utils/route-matcher */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/route-matcher.js\");const _routeregex=__webpack_require__(/*! ./utils/route-regex */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/route-regex.js\");const _formaturl=__webpack_require__(/*! ./utils/format-url */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js\");const _detectdomainlocale=__webpack_require__(/*! ../../../client/detect-domain-locale */ \"(pages-dir-browser)/./node_modules/next/dist/client/detect-domain-locale.js\");const _parsepath=__webpack_require__(/*! ./utils/parse-path */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");const _addlocale=__webpack_require__(/*! ../../../client/add-locale */ \"(pages-dir-browser)/./node_modules/next/dist/client/add-locale.js\");const _removelocale=__webpack_require__(/*! ../../../client/remove-locale */ \"(pages-dir-browser)/./node_modules/next/dist/client/remove-locale.js\");const _removebasepath=__webpack_require__(/*! ../../../client/remove-base-path */ \"(pages-dir-browser)/./node_modules/next/dist/client/remove-base-path.js\");const _addbasepath=__webpack_require__(/*! ../../../client/add-base-path */ \"(pages-dir-browser)/./node_modules/next/dist/client/add-base-path.js\");const _hasbasepath=__webpack_require__(/*! ../../../client/has-base-path */ \"(pages-dir-browser)/./node_modules/next/dist/client/has-base-path.js\");const _resolvehref=__webpack_require__(/*! ../../../client/resolve-href */ \"(pages-dir-browser)/./node_modules/next/dist/client/resolve-href.js\");const _isapiroute=__webpack_require__(/*! ../../../lib/is-api-route */ \"(pages-dir-browser)/./node_modules/next/dist/lib/is-api-route.js\");const _getnextpathnameinfo=__webpack_require__(/*! ./utils/get-next-pathname-info */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");const _formatnextpathnameinfo=__webpack_require__(/*! ./utils/format-next-pathname-info */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");const _comparestates=__webpack_require__(/*! ./utils/compare-states */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/compare-states.js\");const _islocalurl=__webpack_require__(/*! ./utils/is-local-url */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");const _isbot=__webpack_require__(/*! ./utils/is-bot */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/is-bot.js\");const _omit=__webpack_require__(/*! ./utils/omit */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/omit.js\");const _interpolateas=__webpack_require__(/*! ./utils/interpolate-as */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\");const _disablesmoothscroll=__webpack_require__(/*! ./utils/disable-smooth-scroll */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/utils/disable-smooth-scroll.js\");const _constants=__webpack_require__(/*! ../../../lib/constants */ \"(pages-dir-browser)/./node_modules/next/dist/lib/constants.js\");let resolveRewrites;if(false){}function buildCancellationError(){return Object.assign(Object.defineProperty(new Error('Route Cancelled'),\"__NEXT_ERROR_CODE\",{value:\"E315\",enumerable:false,configurable:true}),{cancelled:true});}async function matchesMiddleware(options){const matchers=await Promise.resolve(options.router.pageLoader.getMiddleware());if(!matchers)return false;const{pathname:asPathname}=(0,_parsepath.parsePath)(options.asPath);const cleanedAs=(0,_hasbasepath.hasBasePath)(asPathname)?(0,_removebasepath.removeBasePath)(asPathname):asPathname;const asWithBasePathAndLocale=(0,_addbasepath.addBasePath)((0,_addlocale.addLocale)(cleanedAs,options.locale));return matchers.some(m=>new RegExp(m.regexp).test(asWithBasePathAndLocale));}function stripOrigin(url){const origin=(0,_utils.getLocationOrigin)();return url.startsWith(origin)?url.substring(origin.length):url;}function prepareUrlAs(router,url,as){let[resolvedHref,resolvedAs]=(0,_resolvehref.resolveHref)(router,url,true);const origin=(0,_utils.getLocationOrigin)();const hrefWasAbsolute=resolvedHref.startsWith(origin);const asWasAbsolute=resolvedAs&&resolvedAs.startsWith(origin);resolvedHref=stripOrigin(resolvedHref);resolvedAs=resolvedAs?stripOrigin(resolvedAs):resolvedAs;const preparedUrl=hrefWasAbsolute?resolvedHref:(0,_addbasepath.addBasePath)(resolvedHref);const preparedAs=as?stripOrigin((0,_resolvehref.resolveHref)(router,as)):resolvedAs||resolvedHref;return{url:preparedUrl,as:asWasAbsolute?preparedAs:(0,_addbasepath.addBasePath)(preparedAs)};}function resolveDynamicRoute(pathname,pages){const cleanPathname=(0,_removetrailingslash.removeTrailingSlash)((0,_denormalizepagepath.denormalizePagePath)(pathname));if(cleanPathname==='/404'||cleanPathname==='/_error'){return pathname;}if(!pages.includes(cleanPathname)){pages.some(page=>{if((0,_isdynamic.isDynamicRoute)(page)&&(0,_routeregex.getRouteRegex)(page).re.test(cleanPathname)){pathname=page;return true;}});}return(0,_removetrailingslash.removeTrailingSlash)(pathname);}function getMiddlewareData(source,response,options){const nextConfig={basePath:options.router.basePath,i18n:{locales:options.router.locales},trailingSlash:Boolean(false)};const rewriteHeader=response.headers.get('x-nextjs-rewrite');let rewriteTarget=rewriteHeader||response.headers.get('x-nextjs-matched-path');const matchedPath=response.headers.get(_constants.MATCHED_PATH_HEADER);if(matchedPath&&!rewriteTarget&&!matchedPath.includes('__next_data_catchall')&&!matchedPath.includes('/_error')&&!matchedPath.includes('/404')){rewriteTarget=matchedPath;}if(rewriteTarget){if(rewriteTarget.startsWith('/')||false){const parsedRewriteTarget=(0,_parserelativeurl.parseRelativeUrl)(rewriteTarget);const pathnameInfo=(0,_getnextpathnameinfo.getNextPathnameInfo)(parsedRewriteTarget.pathname,{nextConfig,parseData:true});let fsPathname=(0,_removetrailingslash.removeTrailingSlash)(pathnameInfo.pathname);return Promise.all([options.router.pageLoader.getPageList(),(0,_routeloader.getClientBuildManifest)()]).then(param=>{let[pages,{__rewrites:rewrites}]=param;let as=(0,_addlocale.addLocale)(pathnameInfo.pathname,pathnameInfo.locale);if((0,_isdynamic.isDynamicRoute)(as)||!rewriteHeader&&pages.includes((0,_normalizelocalepath.normalizeLocalePath)((0,_removebasepath.removeBasePath)(as),options.router.locales).pathname)){const parsedSource=(0,_getnextpathnameinfo.getNextPathnameInfo)((0,_parserelativeurl.parseRelativeUrl)(source).pathname,{nextConfig: false?0:nextConfig,parseData:true});as=(0,_addbasepath.addBasePath)(parsedSource.pathname);parsedRewriteTarget.pathname=as;}if(false){}else if(!pages.includes(fsPathname)){const resolvedPathname=resolveDynamicRoute(fsPathname,pages);if(resolvedPathname!==fsPathname){fsPathname=resolvedPathname;}}const resolvedHref=!pages.includes(fsPathname)?resolveDynamicRoute((0,_normalizelocalepath.normalizeLocalePath)((0,_removebasepath.removeBasePath)(parsedRewriteTarget.pathname),options.router.locales).pathname,pages):fsPathname;if((0,_isdynamic.isDynamicRoute)(resolvedHref)){const matches=(0,_routematcher.getRouteMatcher)((0,_routeregex.getRouteRegex)(resolvedHref))(as);Object.assign(parsedRewriteTarget.query,matches||{});}return{type:'rewrite',parsedAs:parsedRewriteTarget,resolvedHref};});}const src=(0,_parsepath.parsePath)(source);const pathname=(0,_formatnextpathnameinfo.formatNextPathnameInfo)(Object.assign({},(0,_getnextpathnameinfo.getNextPathnameInfo)(src.pathname,{nextConfig,parseData:true}),{defaultLocale:options.router.defaultLocale,buildId:''}));return Promise.resolve({type:'redirect-external',destination:\"\"+pathname+src.query+src.hash});}const redirectTarget=response.headers.get('x-nextjs-redirect');if(redirectTarget){if(redirectTarget.startsWith('/')){const src=(0,_parsepath.parsePath)(redirectTarget);const pathname=(0,_formatnextpathnameinfo.formatNextPathnameInfo)(Object.assign({},(0,_getnextpathnameinfo.getNextPathnameInfo)(src.pathname,{nextConfig,parseData:true}),{defaultLocale:options.router.defaultLocale,buildId:''}));return Promise.resolve({type:'redirect-internal',newAs:\"\"+pathname+src.query+src.hash,newUrl:\"\"+pathname+src.query+src.hash});}return Promise.resolve({type:'redirect-external',destination:redirectTarget});}return Promise.resolve({type:'next'});}async function withMiddlewareEffects(options){const matches=await matchesMiddleware(options);if(!matches||!options.fetchData){return null;}const data=await options.fetchData();const effect=await getMiddlewareData(data.dataHref,data.response,options);return{dataHref:data.dataHref,json:data.json,response:data.response,text:data.text,cacheKey:data.cacheKey,effect};}const manualScrollRestoration= false&&0;const SSG_DATA_NOT_FOUND=Symbol('SSG_DATA_NOT_FOUND');function fetchRetry(url,attempts,options){return fetch(url,{credentials:'same-origin',method:options.method||'GET',headers:Object.assign({},options.headers,{'x-nextjs-data':'1'})}).then(response=>{return!response.ok&&attempts>1&&response.status>=500?fetchRetry(url,attempts-1,options):response;});}function tryToParseAsJSON(text){try{return JSON.parse(text);}catch(error){return null;}}function fetchNextData(param){let{dataHref,inflightCache,isPrefetch,hasMiddleware,isServerRender,parseJSON,persistCache,isBackground,unstable_skipClientCache}=param;const{href:cacheKey}=new URL(dataHref,window.location.href);const getData=params=>{var _params_method;return fetchRetry(dataHref,isServerRender?3:1,{headers:Object.assign({},isPrefetch?{purpose:'prefetch'}:{},isPrefetch&&hasMiddleware?{'x-middleware-prefetch':'1'}:{}, false?0:{}),method:(_params_method=params==null?void 0:params.method)!=null?_params_method:'GET'}).then(response=>{if(response.ok&&(params==null?void 0:params.method)==='HEAD'){return{dataHref,response,text:'',json:{},cacheKey};}return response.text().then(text=>{if(!response.ok){if(hasMiddleware&&[301,302,307,308].includes(response.status)){return{dataHref,response,text,json:{},cacheKey};}if(response.status===404){var _tryToParseAsJSON;if((_tryToParseAsJSON=tryToParseAsJSON(text))==null?void 0:_tryToParseAsJSON.notFound){return{dataHref,json:{notFound:SSG_DATA_NOT_FOUND},response,text,cacheKey};}}const error=Object.defineProperty(new Error(\"Failed to load static props\"),\"__NEXT_ERROR_CODE\",{value:\"E124\",enumerable:false,configurable:true});if(!isServerRender){(0,_routeloader.markAssetError)(error);}throw error;}return{dataHref,json:parseJSON?tryToParseAsJSON(text):null,response,text,cacheKey};});}).then(data=>{if(!persistCache||true||0){delete inflightCache[cacheKey];}return data;}).catch(err=>{if(!unstable_skipClientCache){delete inflightCache[cacheKey];}if(err.message==='Failed to fetch'||err.message==='NetworkError when attempting to fetch resource.'||err.message==='Load failed'){(0,_routeloader.markAssetError)(err);}throw err;});};if(unstable_skipClientCache&&persistCache){return getData({}).then(data=>{if(data.response.headers.get('x-middleware-cache')!=='no-cache'){inflightCache[cacheKey]=Promise.resolve(data);}return data;});}if(inflightCache[cacheKey]!==undefined){return inflightCache[cacheKey];}return inflightCache[cacheKey]=getData(isBackground?{method:'HEAD'}:{});}function createKey(){return Math.random().toString(36).slice(2,10);}function handleHardNavigation(param){let{url,router}=param;if(url===(0,_addbasepath.addBasePath)((0,_addlocale.addLocale)(router.asPath,router.locale))){throw Object.defineProperty(new Error(\"Invariant: attempted to hard navigate to the same URL \"+url+\" \"+location.href),\"__NEXT_ERROR_CODE\",{value:\"E282\",enumerable:false,configurable:true});}window.location.href=url;}const getCancelledHandler=param=>{let{route,router}=param;let cancelled=false;const cancel=router.clc=()=>{cancelled=true;};const handleCancelled=()=>{if(cancelled){const error=Object.defineProperty(new Error('Abort fetching component for route: \"'+route+'\"'),\"__NEXT_ERROR_CODE\",{value:\"E483\",enumerable:false,configurable:true});error.cancelled=true;throw error;}if(cancel===router.clc){router.clc=null;}};return handleCancelled;};class Router{reload(){window.location.reload();}back(){window.history.back();}forward(){window.history.forward();}push(url,as,options){if(options===void 0)options={};if(false){};({url,as}=prepareUrlAs(this,url,as));return this.change('pushState',url,as,options);}replace(url,as,options){if(options===void 0)options={};;({url,as}=prepareUrlAs(this,url,as));return this.change('replaceState',url,as,options);}async _bfl(as,resolvedAs,locale,skipNavigate){if(true){if(!this._bfl_s&&!this._bfl_d){const{BloomFilter}=__webpack_require__(/*! ../../lib/bloom-filter */ \"(pages-dir-browser)/./node_modules/next/dist/shared/lib/bloom-filter.js\");let staticFilterData;let dynamicFilterData;try{;({__routerFilterStatic:staticFilterData,__routerFilterDynamic:dynamicFilterData}=await(0,_routeloader.getClientBuildManifest)());}catch(err){console.error(err);if(skipNavigate){return true;}handleHardNavigation({url:(0,_addbasepath.addBasePath)((0,_addlocale.addLocale)(as,locale||this.locale,this.defaultLocale)),router:this});return new Promise(()=>{});}const routerFilterSValue={\"numItems\":0,\"errorRate\":0.0001,\"numBits\":0,\"numHashes\":null,\"bitArray\":[]};if(!staticFilterData&&routerFilterSValue){staticFilterData=routerFilterSValue?routerFilterSValue:undefined;}const routerFilterDValue={\"numItems\":0,\"errorRate\":0.0001,\"numBits\":0,\"numHashes\":null,\"bitArray\":[]};if(!dynamicFilterData&&routerFilterDValue){dynamicFilterData=routerFilterDValue?routerFilterDValue:undefined;}if(staticFilterData==null?void 0:staticFilterData.numHashes){this._bfl_s=new BloomFilter(staticFilterData.numItems,staticFilterData.errorRate);this._bfl_s.import(staticFilterData);}if(dynamicFilterData==null?void 0:dynamicFilterData.numHashes){this._bfl_d=new BloomFilter(dynamicFilterData.numItems,dynamicFilterData.errorRate);this._bfl_d.import(dynamicFilterData);}}let matchesBflStatic=false;let matchesBflDynamic=false;const pathsToCheck=[{as},{as:resolvedAs}];for(const{as:curAs,allowMatchCurrent}of pathsToCheck){if(curAs){const asNoSlash=(0,_removetrailingslash.removeTrailingSlash)(new URL(curAs,'http://n').pathname);const asNoSlashLocale=(0,_addbasepath.addBasePath)((0,_addlocale.addLocale)(asNoSlash,locale||this.locale));if(allowMatchCurrent||asNoSlash!==(0,_removetrailingslash.removeTrailingSlash)(new URL(this.asPath,'http://n').pathname)){var _this__bfl_s,_this__bfl_s1;matchesBflStatic=matchesBflStatic||!!((_this__bfl_s=this._bfl_s)==null?void 0:_this__bfl_s.contains(asNoSlash))||!!((_this__bfl_s1=this._bfl_s)==null?void 0:_this__bfl_s1.contains(asNoSlashLocale));for(const normalizedAS of[asNoSlash,asNoSlashLocale]){const curAsParts=normalizedAS.split('/');for(let i=0;!matchesBflDynamic&&i<curAsParts.length+1;i++){var _this__bfl_d;const currentPart=curAsParts.slice(0,i).join('/');if(currentPart&&((_this__bfl_d=this._bfl_d)==null?void 0:_this__bfl_d.contains(currentPart))){matchesBflDynamic=true;break;}}}if(matchesBflStatic||matchesBflDynamic){if(skipNavigate){return true;}handleHardNavigation({url:(0,_addbasepath.addBasePath)((0,_addlocale.addLocale)(as,locale||this.locale,this.defaultLocale)),router:this});return new Promise(()=>{});}}}}}return false;}async change(method,url,as,options,forcedScroll){var _this_components_pathname;if(!(0,_islocalurl.isLocalURL)(url)){handleHardNavigation({url,router:this});return false;}const isQueryUpdating=options._h===1;if(!isQueryUpdating&&!options.shallow){await this._bfl(as,undefined,options.locale);}let shouldResolveHref=isQueryUpdating||options._shouldResolveHref||(0,_parsepath.parsePath)(url).pathname===(0,_parsepath.parsePath)(as).pathname;const nextState=Object.assign({},this.state);const readyStateChange=this.isReady!==true;this.isReady=true;const isSsr=this.isSsr;if(!isQueryUpdating){this.isSsr=false;}if(isQueryUpdating&&this.clc){return false;}const prevLocale=nextState.locale;if(false){ var _this_locales; }if(_utils.ST){performance.mark('routeChange');}const{shallow=false,scroll=true}=options;const routeProps={shallow};if(this._inFlightRoute&&this.clc){if(!isSsr){Router.events.emit('routeChangeError',buildCancellationError(),this._inFlightRoute,routeProps);}this.clc();this.clc=null;}as=(0,_addbasepath.addBasePath)((0,_addlocale.addLocale)((0,_hasbasepath.hasBasePath)(as)?(0,_removebasepath.removeBasePath)(as):as,options.locale,this.defaultLocale));const cleanedAs=(0,_removelocale.removeLocale)((0,_hasbasepath.hasBasePath)(as)?(0,_removebasepath.removeBasePath)(as):as,nextState.locale);this._inFlightRoute=as;const localeChange=prevLocale!==nextState.locale;if(!isQueryUpdating&&this.onlyAHashChange(cleanedAs)&&!localeChange){nextState.asPath=cleanedAs;Router.events.emit('hashChangeStart',as,routeProps);this.changeState(method,url,as,Object.assign({},options,{scroll:false}));if(scroll){this.scrollToHash(cleanedAs);}try{await this.set(nextState,this.components[nextState.route],null);}catch(err){if((0,_iserror.default)(err)&&err.cancelled){Router.events.emit('routeChangeError',err,cleanedAs,routeProps);}throw err;}Router.events.emit('hashChangeComplete',as,routeProps);return true;}let parsed=(0,_parserelativeurl.parseRelativeUrl)(url);let{pathname,query}=parsed;let pages,rewrites;try{;[pages,{__rewrites:rewrites}]=await Promise.all([this.pageLoader.getPageList(),(0,_routeloader.getClientBuildManifest)(),this.pageLoader.getMiddleware()]);}catch(err){handleHardNavigation({url:as,router:this});return false;}if(!this.urlIsNew(cleanedAs)&&!localeChange){method='replaceState';}let resolvedAs=as;pathname=pathname?(0,_removetrailingslash.removeTrailingSlash)((0,_removebasepath.removeBasePath)(pathname)):pathname;let route=(0,_removetrailingslash.removeTrailingSlash)(pathname);const parsedAsPathname=as.startsWith('/')&&(0,_parserelativeurl.parseRelativeUrl)(as).pathname;if((_this_components_pathname=this.components[pathname])==null?void 0:_this_components_pathname.__appRouter){handleHardNavigation({url:as,router:this});return new Promise(()=>{});}const isMiddlewareRewrite=!!(parsedAsPathname&&route!==parsedAsPathname&&(!(0,_isdynamic.isDynamicRoute)(route)||!(0,_routematcher.getRouteMatcher)((0,_routeregex.getRouteRegex)(route))(parsedAsPathname)));const isMiddlewareMatch=!options.shallow&&(await matchesMiddleware({asPath:as,locale:nextState.locale,router:this}));if(isQueryUpdating&&isMiddlewareMatch){shouldResolveHref=false;}if(shouldResolveHref&&pathname!=='/_error'){;options._shouldResolveHref=true;if(false){}else{parsed.pathname=resolveDynamicRoute(pathname,pages);if(parsed.pathname!==pathname){pathname=parsed.pathname;parsed.pathname=(0,_addbasepath.addBasePath)(pathname);if(!isMiddlewareMatch){url=(0,_formaturl.formatWithValidation)(parsed);}}}}if(!(0,_islocalurl.isLocalURL)(as)){if(true){throw Object.defineProperty(new Error('Invalid href: \"'+url+'\" and as: \"'+as+'\", received relative href and external as'+\"\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as\"),\"__NEXT_ERROR_CODE\",{value:\"E380\",enumerable:false,configurable:true});}handleHardNavigation({url:as,router:this});return false;}resolvedAs=(0,_removelocale.removeLocale)((0,_removebasepath.removeBasePath)(resolvedAs),nextState.locale);route=(0,_removetrailingslash.removeTrailingSlash)(pathname);let routeMatch=false;if((0,_isdynamic.isDynamicRoute)(route)){const parsedAs=(0,_parserelativeurl.parseRelativeUrl)(resolvedAs);const asPathname=parsedAs.pathname;const routeRegex=(0,_routeregex.getRouteRegex)(route);routeMatch=(0,_routematcher.getRouteMatcher)(routeRegex)(asPathname);const shouldInterpolate=route===asPathname;const interpolatedAs=shouldInterpolate?(0,_interpolateas.interpolateAs)(route,asPathname,query):{};if(!routeMatch||shouldInterpolate&&!interpolatedAs.result){const missingParams=Object.keys(routeRegex.groups).filter(param=>!query[param]&&!routeRegex.groups[param].optional);if(missingParams.length>0&&!isMiddlewareMatch){if(true){console.warn(\"\"+(shouldInterpolate?\"Interpolating href\":\"Mismatching `as` and `href`\")+\" failed to manually provide \"+(\"the params: \"+missingParams.join(', ')+\" in the `href`'s `query`\"));}throw Object.defineProperty(new Error((shouldInterpolate?\"The provided `href` (\"+url+\") value is missing query values (\"+missingParams.join(', ')+\") to be interpolated properly. \":\"The provided `as` value (\"+asPathname+\") is incompatible with the `href` value (\"+route+\"). \")+(\"Read more: https://nextjs.org/docs/messages/\"+(shouldInterpolate?'href-interpolation-failed':'incompatible-href-as'))),\"__NEXT_ERROR_CODE\",{value:\"E344\",enumerable:false,configurable:true});}}else if(shouldInterpolate){as=(0,_formaturl.formatWithValidation)(Object.assign({},parsedAs,{pathname:interpolatedAs.result,query:(0,_omit.omit)(query,interpolatedAs.params)}));}else{Object.assign(query,routeMatch);}}if(!isQueryUpdating){Router.events.emit('routeChangeStart',as,routeProps);}const isErrorRoute=this.pathname==='/404'||this.pathname==='/_error';try{var _self___NEXT_DATA___props_pageProps,_self___NEXT_DATA___props,_routeInfo_props;let routeInfo=await this.getRouteInfo({route,pathname,query,as,resolvedAs,routeProps,locale:nextState.locale,isPreview:nextState.isPreview,hasMiddleware:isMiddlewareMatch,unstable_skipClientCache:options.unstable_skipClientCache,isQueryUpdating:isQueryUpdating&&!this.isFallback,isMiddlewareRewrite});if(!isQueryUpdating&&!options.shallow){await this._bfl(as,'resolvedAs'in routeInfo?routeInfo.resolvedAs:undefined,nextState.locale);}if('route'in routeInfo&&isMiddlewareMatch){pathname=routeInfo.route||route;route=pathname;if(!routeProps.shallow){query=Object.assign({},routeInfo.query||{},query);}const cleanedParsedPathname=(0,_hasbasepath.hasBasePath)(parsed.pathname)?(0,_removebasepath.removeBasePath)(parsed.pathname):parsed.pathname;if(routeMatch&&pathname!==cleanedParsedPathname){Object.keys(routeMatch).forEach(key=>{if(routeMatch&&query[key]===routeMatch[key]){delete query[key];}});}if((0,_isdynamic.isDynamicRoute)(pathname)){const prefixedAs=!routeProps.shallow&&routeInfo.resolvedAs?routeInfo.resolvedAs:(0,_addbasepath.addBasePath)((0,_addlocale.addLocale)(new URL(as,location.href).pathname,nextState.locale),true);let rewriteAs=prefixedAs;if((0,_hasbasepath.hasBasePath)(rewriteAs)){rewriteAs=(0,_removebasepath.removeBasePath)(rewriteAs);}if(false){}const routeRegex=(0,_routeregex.getRouteRegex)(pathname);const curRouteMatch=(0,_routematcher.getRouteMatcher)(routeRegex)(new URL(rewriteAs,location.href).pathname);if(curRouteMatch){Object.assign(query,curRouteMatch);}}}if('type'in routeInfo){if(routeInfo.type==='redirect-internal'){return this.change(method,routeInfo.newUrl,routeInfo.newAs,options);}else{handleHardNavigation({url:routeInfo.destination,router:this});return new Promise(()=>{});}}const component=routeInfo.Component;if(component&&component.unstable_scriptLoader){const scripts=[].concat(component.unstable_scriptLoader());scripts.forEach(script=>{(0,_script.handleClientScriptLoad)(script.props);});}if((routeInfo.__N_SSG||routeInfo.__N_SSP)&&routeInfo.props){if(routeInfo.props.pageProps&&routeInfo.props.pageProps.__N_REDIRECT){options.locale=false;const destination=routeInfo.props.pageProps.__N_REDIRECT;if(destination.startsWith('/')&&routeInfo.props.pageProps.__N_REDIRECT_BASE_PATH!==false){const parsedHref=(0,_parserelativeurl.parseRelativeUrl)(destination);parsedHref.pathname=resolveDynamicRoute(parsedHref.pathname,pages);const{url:newUrl,as:newAs}=prepareUrlAs(this,destination,destination);return this.change(method,newUrl,newAs,options);}handleHardNavigation({url:destination,router:this});return new Promise(()=>{});}nextState.isPreview=!!routeInfo.props.__N_PREVIEW;if(routeInfo.props.notFound===SSG_DATA_NOT_FOUND){let notFoundRoute;try{await this.fetchComponent('/404');notFoundRoute='/404';}catch(_){notFoundRoute='/_error';}routeInfo=await this.getRouteInfo({route:notFoundRoute,pathname:notFoundRoute,query,as,resolvedAs,routeProps:{shallow:false},locale:nextState.locale,isPreview:nextState.isPreview,isNotFound:true});if('type'in routeInfo){throw Object.defineProperty(new Error(\"Unexpected middleware effect on /404\"),\"__NEXT_ERROR_CODE\",{value:\"E158\",enumerable:false,configurable:true});}}}if(isQueryUpdating&&this.pathname==='/_error'&&((_self___NEXT_DATA___props=self.__NEXT_DATA__.props)==null?void 0:(_self___NEXT_DATA___props_pageProps=_self___NEXT_DATA___props.pageProps)==null?void 0:_self___NEXT_DATA___props_pageProps.statusCode)===500&&((_routeInfo_props=routeInfo.props)==null?void 0:_routeInfo_props.pageProps)){routeInfo.props.pageProps.statusCode=500;}var _routeInfo_route;const isValidShallowRoute=options.shallow&&nextState.route===((_routeInfo_route=routeInfo.route)!=null?_routeInfo_route:route);var _options_scroll;const shouldScroll=(_options_scroll=options.scroll)!=null?_options_scroll:!isQueryUpdating&&!isValidShallowRoute;const resetScroll=shouldScroll?{x:0,y:0}:null;const upcomingScrollState=forcedScroll!=null?forcedScroll:resetScroll;const upcomingRouterState=Object.assign({},nextState,{route,pathname,query,asPath:cleanedAs,isFallback:false});if(isQueryUpdating&&isErrorRoute){var _self___NEXT_DATA___props_pageProps1,_self___NEXT_DATA___props1,_routeInfo_props1;routeInfo=await this.getRouteInfo({route:this.pathname,pathname:this.pathname,query,as,resolvedAs,routeProps:{shallow:false},locale:nextState.locale,isPreview:nextState.isPreview,isQueryUpdating:isQueryUpdating&&!this.isFallback});if('type'in routeInfo){throw Object.defineProperty(new Error(\"Unexpected middleware effect on \"+this.pathname),\"__NEXT_ERROR_CODE\",{value:\"E225\",enumerable:false,configurable:true});}if(this.pathname==='/_error'&&((_self___NEXT_DATA___props1=self.__NEXT_DATA__.props)==null?void 0:(_self___NEXT_DATA___props_pageProps1=_self___NEXT_DATA___props1.pageProps)==null?void 0:_self___NEXT_DATA___props_pageProps1.statusCode)===500&&((_routeInfo_props1=routeInfo.props)==null?void 0:_routeInfo_props1.pageProps)){routeInfo.props.pageProps.statusCode=500;}try{await this.set(upcomingRouterState,routeInfo,upcomingScrollState);}catch(err){if((0,_iserror.default)(err)&&err.cancelled){Router.events.emit('routeChangeError',err,cleanedAs,routeProps);}throw err;}return true;}Router.events.emit('beforeHistoryChange',as,routeProps);this.changeState(method,url,as,options);const canSkipUpdating=isQueryUpdating&&!upcomingScrollState&&!readyStateChange&&!localeChange&&(0,_comparestates.compareRouterStates)(upcomingRouterState,this.state);if(!canSkipUpdating){try{await this.set(upcomingRouterState,routeInfo,upcomingScrollState);}catch(e){if(e.cancelled)routeInfo.error=routeInfo.error||e;else throw e;}if(routeInfo.error){if(!isQueryUpdating){Router.events.emit('routeChangeError',routeInfo.error,cleanedAs,routeProps);}throw routeInfo.error;}if(false){}if(!isQueryUpdating){Router.events.emit('routeChangeComplete',as,routeProps);}const hashRegex=/#.+$/;if(shouldScroll&&hashRegex.test(as)){this.scrollToHash(as);}}return true;}catch(err){if((0,_iserror.default)(err)&&err.cancelled){return false;}throw err;}}changeState(method,url,as,options){if(options===void 0)options={};if(true){if(typeof window.history==='undefined'){console.error(\"Warning: window.history is not available.\");return;}if(typeof window.history[method]==='undefined'){console.error(\"Warning: window.history.\"+method+\" is not available\");return;}}if(method!=='pushState'||(0,_utils.getURL)()!==as){this._shallow=options.shallow;window.history[method]({url,as,options,__N:true,key:this._key=method!=='pushState'?this._key:createKey()},'',as);}}async handleRouteInfoError(err,pathname,query,as,routeProps,loadErrorFail){if(err.cancelled){throw err;}if((0,_routeloader.isAssetError)(err)||loadErrorFail){Router.events.emit('routeChangeError',err,as,routeProps);handleHardNavigation({url:as,router:this});throw buildCancellationError();}console.error(err);try{let props;const{page:Component,styleSheets}=await this.fetchComponent('/_error');const routeInfo={props,Component,styleSheets,err,error:err};if(!routeInfo.props){try{routeInfo.props=await this.getInitialProps(Component,{err,pathname,query});}catch(gipErr){console.error('Error in error page `getInitialProps`: ',gipErr);routeInfo.props={};}}return routeInfo;}catch(routeInfoErr){return this.handleRouteInfoError((0,_iserror.default)(routeInfoErr)?routeInfoErr:Object.defineProperty(new Error(routeInfoErr+''),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:false,configurable:true}),pathname,query,as,routeProps,true);}}async getRouteInfo(param){let{route:requestedRoute,pathname,query,as,resolvedAs,routeProps,locale,hasMiddleware,isPreview,unstable_skipClientCache,isQueryUpdating,isMiddlewareRewrite,isNotFound}=param;let route=requestedRoute;try{var _data_effect,_data_effect1,_data_effect2,_data_response;let existingInfo=this.components[route];if(routeProps.shallow&&existingInfo&&this.route===route){return existingInfo;}const handleCancelled=getCancelledHandler({route,router:this});if(hasMiddleware){existingInfo=undefined;}let cachedRouteInfo=existingInfo&&!('initial'in existingInfo)&&false?0:undefined;const isBackground=isQueryUpdating;const fetchNextDataParams={dataHref:this.pageLoader.getDataHref({href:(0,_formaturl.formatWithValidation)({pathname,query}),skipInterpolation:true,asPath:isNotFound?'/404':resolvedAs,locale}),hasMiddleware:true,isServerRender:this.isSsr,parseJSON:true,inflightCache:isBackground?this.sbc:this.sdc,persistCache:!isPreview,isPrefetch:false,unstable_skipClientCache,isBackground};let data=isQueryUpdating&&!isMiddlewareRewrite?null:await withMiddlewareEffects({fetchData:()=>fetchNextData(fetchNextDataParams),asPath:isNotFound?'/404':resolvedAs,locale:locale,router:this}).catch(err=>{if(isQueryUpdating){return null;}throw err;});if(data&&(pathname==='/_error'||pathname==='/404')){data.effect=undefined;}if(isQueryUpdating){if(!data){data={json:self.__NEXT_DATA__.props};}else{data.json=self.__NEXT_DATA__.props;}}handleCancelled();if((data==null?void 0:(_data_effect=data.effect)==null?void 0:_data_effect.type)==='redirect-internal'||(data==null?void 0:(_data_effect1=data.effect)==null?void 0:_data_effect1.type)==='redirect-external'){return data.effect;}if((data==null?void 0:(_data_effect2=data.effect)==null?void 0:_data_effect2.type)==='rewrite'){const resolvedRoute=(0,_removetrailingslash.removeTrailingSlash)(data.effect.resolvedHref);const pages=await this.pageLoader.getPageList();if(!isQueryUpdating||pages.includes(resolvedRoute)){route=resolvedRoute;pathname=data.effect.resolvedHref;query=Object.assign({},query,data.effect.parsedAs.query);resolvedAs=(0,_removebasepath.removeBasePath)((0,_normalizelocalepath.normalizeLocalePath)(data.effect.parsedAs.pathname,this.locales).pathname);existingInfo=this.components[route];if(routeProps.shallow&&existingInfo&&this.route===route&&!hasMiddleware){return Object.assign({},existingInfo,{route});}}}if((0,_isapiroute.isAPIRoute)(route)){handleHardNavigation({url:as,router:this});return new Promise(()=>{});}const routeInfo=cachedRouteInfo||(await this.fetchComponent(route).then(res=>({Component:res.page,styleSheets:res.styleSheets,__N_SSG:res.mod.__N_SSG,__N_SSP:res.mod.__N_SSP})));if(true){const{isValidElementType}=__webpack_require__(/*! next/dist/compiled/react-is */ \"(pages-dir-browser)/./node_modules/next/dist/compiled/react-is/index.js\");if(!isValidElementType(routeInfo.Component)){throw Object.defineProperty(new Error('The default export is not a React Component in page: \"'+pathname+'\"'),\"__NEXT_ERROR_CODE\",{value:\"E286\",enumerable:false,configurable:true});}}const wasBailedPrefetch=data==null?void 0:(_data_response=data.response)==null?void 0:_data_response.headers.get('x-middleware-skip');const shouldFetchData=routeInfo.__N_SSG||routeInfo.__N_SSP;if(wasBailedPrefetch&&(data==null?void 0:data.dataHref)){delete this.sdc[data.dataHref];}const{props,cacheKey}=await this._getData(async()=>{if(shouldFetchData){if((data==null?void 0:data.json)&&!wasBailedPrefetch){return{cacheKey:data.cacheKey,props:data.json};}const dataHref=(data==null?void 0:data.dataHref)?data.dataHref:this.pageLoader.getDataHref({href:(0,_formaturl.formatWithValidation)({pathname,query}),asPath:resolvedAs,locale});const fetched=await fetchNextData({dataHref,isServerRender:this.isSsr,parseJSON:true,inflightCache:wasBailedPrefetch?{}:this.sdc,persistCache:!isPreview,isPrefetch:false,unstable_skipClientCache});return{cacheKey:fetched.cacheKey,props:fetched.json||{}};}return{headers:{},props:await this.getInitialProps(routeInfo.Component,{pathname,query,asPath:as,locale,locales:this.locales,defaultLocale:this.defaultLocale})};});if(routeInfo.__N_SSP&&fetchNextDataParams.dataHref&&cacheKey){delete this.sdc[cacheKey];}if(!this.isPreview&&routeInfo.__N_SSG&&false&&0){}props.pageProps=Object.assign({},props.pageProps);routeInfo.props=props;routeInfo.route=route;routeInfo.query=query;routeInfo.resolvedAs=resolvedAs;this.components[route]=routeInfo;return routeInfo;}catch(err){return this.handleRouteInfoError((0,_iserror.getProperError)(err),pathname,query,as,routeProps);}}set(state,data,resetScroll){this.state=state;return this.sub(data,this.components['/_app'].Component,resetScroll);}beforePopState(cb){this._bps=cb;}onlyAHashChange(as){if(!this.asPath)return false;const[oldUrlNoHash,oldHash]=this.asPath.split('#',2);const[newUrlNoHash,newHash]=as.split('#',2);if(newHash&&oldUrlNoHash===newUrlNoHash&&oldHash===newHash){return true;}if(oldUrlNoHash!==newUrlNoHash){return false;}return oldHash!==newHash;}scrollToHash(as){const[,hash='']=as.split('#',2);(0,_disablesmoothscroll.disableSmoothScrollDuringRouteTransition)(()=>{if(hash===''||hash==='top'){window.scrollTo(0,0);return;}const rawHash=decodeURIComponent(hash);const idEl=document.getElementById(rawHash);if(idEl){idEl.scrollIntoView();return;}const nameEl=document.getElementsByName(rawHash)[0];if(nameEl){nameEl.scrollIntoView();}},{onlyHashChange:this.onlyAHashChange(as)});}urlIsNew(asPath){return this.asPath!==asPath;}async prefetch(url,asPath,options){if(asPath===void 0)asPath=url;if(options===void 0)options={};if(true){return;}if( true&&(0,_isbot.isBot)(window.navigator.userAgent)){return;}let parsed=(0,_parserelativeurl.parseRelativeUrl)(url);const urlPathname=parsed.pathname;let{pathname,query}=parsed;const originalPathname=pathname;if(false){}const pages=await this.pageLoader.getPageList();let resolvedAs=asPath;const locale=typeof options.locale!=='undefined'?options.locale||undefined:this.locale;const isMiddlewareMatch=await matchesMiddleware({asPath:asPath,locale:locale,router:this});if(false){}parsed.pathname=resolveDynamicRoute(parsed.pathname,pages);if((0,_isdynamic.isDynamicRoute)(parsed.pathname)){pathname=parsed.pathname;parsed.pathname=pathname;Object.assign(query,(0,_routematcher.getRouteMatcher)((0,_routeregex.getRouteRegex)(parsed.pathname))((0,_parsepath.parsePath)(asPath).pathname)||{});if(!isMiddlewareMatch){url=(0,_formaturl.formatWithValidation)(parsed);}}const data= false?0:await withMiddlewareEffects({fetchData:()=>fetchNextData({dataHref:this.pageLoader.getDataHref({href:(0,_formaturl.formatWithValidation)({pathname:originalPathname,query}),skipInterpolation:true,asPath:resolvedAs,locale}),hasMiddleware:true,isServerRender:false,parseJSON:true,inflightCache:this.sdc,persistCache:!this.isPreview,isPrefetch:true}),asPath:asPath,locale:locale,router:this});if((data==null?void 0:data.effect.type)==='rewrite'){parsed.pathname=data.effect.resolvedHref;pathname=data.effect.resolvedHref;query=Object.assign({},query,data.effect.parsedAs.query);resolvedAs=data.effect.parsedAs.pathname;url=(0,_formaturl.formatWithValidation)(parsed);}if((data==null?void 0:data.effect.type)==='redirect-external'){return;}const route=(0,_removetrailingslash.removeTrailingSlash)(pathname);if(await this._bfl(asPath,resolvedAs,options.locale,true)){this.components[urlPathname]={__appRouter:true};}await Promise.all([this.pageLoader._isSsg(route).then(isSsg=>{return isSsg?fetchNextData({dataHref:(data==null?void 0:data.json)?data==null?void 0:data.dataHref:this.pageLoader.getDataHref({href:url,asPath:resolvedAs,locale:locale}),isServerRender:false,parseJSON:true,inflightCache:this.sdc,persistCache:!this.isPreview,isPrefetch:true,unstable_skipClientCache:options.unstable_skipClientCache||options.priority&&!!true}).then(()=>false).catch(()=>false):false;}),this.pageLoader[options.priority?'loadPage':'prefetch'](route)]);}async fetchComponent(route){const handleCancelled=getCancelledHandler({route,router:this});try{const componentResult=await this.pageLoader.loadPage(route);handleCancelled();return componentResult;}catch(err){handleCancelled();throw err;}}_getData(fn){let cancelled=false;const cancel=()=>{cancelled=true;};this.clc=cancel;return fn().then(data=>{if(cancel===this.clc){this.clc=null;}if(cancelled){const err=Object.defineProperty(new Error('Loading initial props cancelled'),\"__NEXT_ERROR_CODE\",{value:\"E405\",enumerable:false,configurable:true});err.cancelled=true;throw err;}return data;});}getInitialProps(Component,ctx){const{Component:App}=this.components['/_app'];const AppTree=this._wrapApp(App);ctx.AppTree=AppTree;return(0,_utils.loadGetInitialProps)(App,{AppTree,Component,router:this,ctx});}get route(){return this.state.route;}get pathname(){return this.state.pathname;}get query(){return this.state.query;}get asPath(){return this.state.asPath;}get locale(){return this.state.locale;}get isFallback(){return this.state.isFallback;}get isPreview(){return this.state.isPreview;}constructor(pathname,query,as,{initialProps,pageLoader,App,wrapApp,Component,err,subscription,isFallback,locale,locales,defaultLocale,domainLocales,isPreview}){this.sdc={};this.sbc={};this.isFirstPopStateEvent=true;this._key=createKey();this.onPopState=e=>{const{isFirstPopStateEvent}=this;this.isFirstPopStateEvent=false;const state=e.state;if(!state){const{pathname,query}=this;this.changeState('replaceState',(0,_formaturl.formatWithValidation)({pathname:(0,_addbasepath.addBasePath)(pathname),query}),(0,_utils.getURL)());return;}if(state.__NA){window.location.reload();return;}if(!state.__N){return;}if(isFirstPopStateEvent&&this.locale===state.options.locale&&state.as===this.asPath){return;}let forcedScroll;const{url,as,options,key}=state;if(false){}this._key=key;const{pathname}=(0,_parserelativeurl.parseRelativeUrl)(url);if(this.isSsr&&as===(0,_addbasepath.addBasePath)(this.asPath)&&pathname===(0,_addbasepath.addBasePath)(this.pathname)){return;}if(this._bps&&!this._bps(state)){return;}this.change('replaceState',url,as,Object.assign({},options,{shallow:options.shallow&&this._shallow,locale:options.locale||this.defaultLocale,_h:0}),forcedScroll);};const route=(0,_removetrailingslash.removeTrailingSlash)(pathname);this.components={};if(pathname!=='/_error'){this.components[route]={Component,initial:true,props:initialProps,err,__N_SSG:initialProps&&initialProps.__N_SSG,__N_SSP:initialProps&&initialProps.__N_SSP};}this.components['/_app']={Component:App,styleSheets:[]};this.events=Router.events;this.pageLoader=pageLoader;const autoExportDynamic=(0,_isdynamic.isDynamicRoute)(pathname)&&self.__NEXT_DATA__.autoExport;this.basePath= false||'';this.sub=subscription;this.clc=null;this._wrapApp=wrapApp;this.isSsr=true;this.isLocaleDomain=false;this.isReady=!!(self.__NEXT_DATA__.gssp||self.__NEXT_DATA__.gip||self.__NEXT_DATA__.isExperimentalCompile||self.__NEXT_DATA__.appGip&&!self.__NEXT_DATA__.gsp||!autoExportDynamic&&!self.location.search&&!false);if(false){}this.state={route,pathname,query,asPath:autoExportDynamic?pathname:as,isPreview:!!isPreview,locale: false?0:undefined,isFallback};this._initialMatchesMiddlewarePromise=Promise.resolve(false);if(true){if(!as.startsWith('//')){const options={locale};const asPath=(0,_utils.getURL)();this._initialMatchesMiddlewarePromise=matchesMiddleware({router:this,locale,asPath}).then(matches=>{;options._shouldResolveHref=as!==pathname;this.changeState('replaceState',matches?asPath:(0,_formaturl.formatWithValidation)({pathname:(0,_addbasepath.addBasePath)(pathname),query}),asPath,options);return matches;});}window.addEventListener('popstate',this.onPopState);if(false){}}}}Router.events=(0,_mitt.default)();\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/next/dist/shared/lib/router/router.js\n"));

/***/ })

});