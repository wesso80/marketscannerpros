üü¢ Step 2 ‚Äî Put the Next.js app on Vercel (prod)

Push the project to GitHub.

In Vercel ‚Üí ‚ÄúNew Project‚Äù ‚Üí Import repo ‚Üí Framework Next.js.

Set Environment Variables (we‚Äôll add more as we go):

NEXT_PUBLIC_APP_NAME=MarketScanner Pros

NEXT_PUBLIC_API_URL=https://api.marketscannerpros.app (placeholder)

NEXT_PUBLIC_BASE_URL=https://app.marketscannerpros.app

Domains: add app.marketscannerpros.app in Vercel.

In Cloudflare (or your DNS), add a CNAME: app ‚Üí cname.vercel-dns.com.

In your marketing site (Cloudflare Pages), change the ‚ÄúLaunch App‚Äù link to:

https://app.marketscannerpros.app

You can keep Replit for local tinkering, but Vercel should serve prod.

üü¢ Step 3 ‚Äî Auth (NextAuth ‚Äì Google first, email later)

Packages:
npm i next-auth @auth/core @auth/prisma-adapter (or just next-auth if you don‚Äôt use a DB yet)

/app/api/auth/[...nextauth]/route.ts

import NextAuth from "next-auth";
import Google from "next-auth/providers/google";

const handler = NextAuth({
  providers: [
    Google({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
  session: { strategy: "jwt" },
});
export { handler as GET, handler as POST };


/middleware.ts (protect /dashboard)

export { default } from "next-auth/middleware";
export const config = { matcher: ["/dashboard/:path*"] };


/app/dashboard/page.tsx

import { getServerSession } from "next-auth";

export default async function Dashboard() {
  const session = await getServerSession();
  if (!session) return null; // middleware redirects to sign-in
  return <main><h1>Dashboard</h1><p>Welcome {session.user?.email}</p></main>;
}


ENV (Vercel):

GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET

NEXTAUTH_URL=https://app.marketscannerpros.app

NEXTAUTH_SECRET (use openssl rand -base64 32)

Add a ‚ÄúSign in‚Äù / ‚ÄúAccount‚Äù item in the nav later. For now, protecting /dashboard proves auth works.

üü¢ Step 4 ‚Äî Stripe (Portal + Webhooks; keep Checkout links for now)

You already use hosted Checkout links (great for speed). Add a customer portal so users can manage/cancel.

Install: npm i stripe

/app/api/stripe/portal/route.ts

import Stripe from "stripe";
import { NextResponse } from "next/server";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: "2024-06-20" });

export async function POST() {
  // TODO: look up Stripe customerId from your user (via DB/session metadata)
  // For a simple first pass, use a single test customer:
  const customer = process.env.STRIPE_TEST_CUSTOMER_ID!;
  const session = await stripe.billingPortal.sessions.create({
    customer,
    return_url: ${process.env.NEXT_PUBLIC_BASE_URL}/dashboard,
  });
  return NextResponse.json({ url: session.url });
}


Add a button (e.g., on /pricing or /dashboard):

async function openPortal() {
  const res = await fetch("/api/stripe/portal", { method: "POST" });
  const { url } = await res.json();
  window.location.href = url;
}
<button onClick={openPortal}>Manage Subscription</button>


Webhooks (Vercel Integration):

In Stripe Dashboard ‚Üí Developers ‚Üí Webhooks ‚Üí Add endpoint.

Use Vercel‚Äôs Stripe Webhooks integration (sets STRIPE_WEBHOOK_SECRET).

Add /api/stripe/webhook route (we can scaffold when you‚Äôre ready to persist subscription status).

ENV (Vercel):

STRIPE_SECRET_KEY

STRIPE_TEST_CUSTOMER_ID (temp)

Later: STRIPE_WEBHOOK_SECRET, product/price IDs if you switch to API-based Checkout.

We can later replace hosted Checkout links with server-created sessions for tighter coupling to users.

üü¢ Step 5 ‚Äî FastAPI service (data backend)

Spin up a small FastAPI with CORS enabled.

server/main.py

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://app.marketscannerpros.app", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
def health(): return {"ok": True}

@app.get("/ohlcv")
def ohlcv(symbol: str, tf: str = "1D", limit: int = 200):
    # TODO: return real data
    return {"symbol": symbol, "tf": tf, "data": []}

# Your existing modules:
# - market_data_api.py    (OHLCV, quotes, backtests)
# - iap_api.py            (Apple IAP receipt validation)


Deploy on Railway/Render/Fly.io and note the URL, e.g. https://api-market.fly.dev.
Set NEXT_PUBLIC_API_URL=https://api-market.fly.dev on Vercel.

Next.js fetch helper: /lib/api.ts

export async function api<T>(path: string, init?: RequestInit): Promise<T> {
  const url = ${process.env.NEXT_PUBLIC_API_URL}${path};
  const res = await fetch(url, { ...init, cache: "no-store" });
  if (!res.ok) throw new Error(API ${res.status});
  return res.json();
}


Example usage (dashboard):

import { api } from "@/lib/api";

export default async function Dashboard() {
  const health = await api<{ok:boolean}>("/health");
  return <main><h1>Dashboard</h1><p>API OK: {String(health.ok)}</p></main>;
}

üü¢ Step 6 ‚Äî Final polish & routing tweaks

Rename route folder app/app ‚Üí app/launch (URL becomes /launch) and update nav.

Keep /privacy and /terms as 1-line re-exports of /legal/*.

Make /dashboard the main ‚Äúapp‚Äù landing after auth; Launch App button should go to /dashboard.

üü¢ Step 7 ‚Äî DNS & links

Vercel serves app.marketscannerpros.app.

Marketing site remains on Cloudflare Pages at marketscannerpros.app.

Update all ‚ÄúLaunch App‚Äù CTAs on marketing pages to the subdomain (https://app.marketscannerpros.app).

üü¢ Step 8 ‚Äî QA checklist

‚úÖ /privacy, /terms, /pricing, /guide, /disclaimer, /contact.

‚úÖ /launch (or /dashboard) loads and shows logo/hero.

‚úÖ Auth (sign in with Google) gates /dashboard.

‚úÖ Stripe portal opens & returns to /dashboard.

‚úÖ FastAPI /health displays ‚ÄúAPI OK‚Äù on dashboard.

‚úÖ Canonicals (alternates.canonical) set on legal pages.

After this

Replace hosted Stripe links with API-created Checkout Session tied to the logged-in user.

Add a tiny DB (e.g., Planetscale/Supabase/Prisma) to persist user ‚Üî stripeCustomerId ‚Üî subscriptionStatus.

Add scanning UI on /dashboard that calls your FastAPI endpoints.

Ship!

If you want, say the word and I‚Äôll give you the exact code to:

Rename /app ‚Üí /launch in the nav and file tree,

Add /dashboard with auth guard,

Add the Stripe portal route,

Scaffold a FastAPI deployable with a Dockerfile.